generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  phone     String?
  role      Role       @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]
  carts     Cart[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
  STAFF
}

model Address {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  fullName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  Order        Order[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  parentId  String?
  children  Category[] @relation("CategoryParent")
  products  Product[]
  createdAt DateTime   @default(now())
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  logoUrl   String?
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String?
  brand       Brand?           @relation(fields: [brandId], references: [id])
  brandId     String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  String?
  variants    ProductVariant[]
  images      ProductImage[]
  reviews     Review[]
  wishlists   Wishlist[]
  status      ProductStatus    @default(DRAFT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  orderItems OrderItem[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

model ProductVariant {
  id                  String         @id @default(uuid())
  product             Product        @relation(fields: [productId], references: [id])
  productId           String
  sku                 String         @unique
  price               Decimal
  cost                Decimal?
  stockQuantity       Int
  stockAlertThreshold Int            @default(5)
  isDefault           Boolean        @default(false)
  orderItems          OrderItem[]
  cartItems           CartItem[]
  inventoryLogs       InventoryLog[]
  createdAt           DateTime       @default(now())
}

model ProductImage {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  imageUrl   String
  isFeatured Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Order {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  address       Address       @relation(fields: [addressId], references: [id])
  addressId     String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  paymentMethod String?
  total         Decimal
  discount      Decimal       @default(0)
  shippingCost  Decimal       @default(0)
  orderItems    OrderItem[]

  placedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model OrderItem {
  id         String         @id @default(uuid())
  orderId    String
  product    Product        @relation(fields: [productId], references: [id])
  productId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String
  quantity   Int
  unitPrice  Decimal
  totalPrice Decimal
  order      Order          @relation(fields: [orderId], references: [id])
  // orders Order[]
}

model InventoryLog {
  id          String          @id @default(uuid())
  variant     ProductVariant  @relation(fields: [variantId], references: [id])
  variantId   String
  change      Int
  reason      InventoryReason
  referenceId String?
  note        String?
  createdAt   DateTime        @default(now())
}

enum InventoryReason {
  SALE
  RESTOCK
  RETURN
  CORRECTION
  MANUAL
}

model Review {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  rating     Int
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String         @id @default(uuid())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  createdAt DateTime       @default(now())
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}
